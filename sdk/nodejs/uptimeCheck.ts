// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class UptimeCheck extends pulumi.CustomResource {
    /**
     * Get an existing UptimeCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UptimeCheckState, opts?: pulumi.CustomResourceOptions): UptimeCheck {
        return new UptimeCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'statuscake:index/uptimeCheck:UptimeCheck';

    /**
     * Returns true if the given object is an instance of UptimeCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UptimeCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UptimeCheck.__pulumiType;
    }

    /**
     * Number of seconds between checks
     */
    public readonly checkInterval!: pulumi.Output<number>;
    /**
     * Number of confirmation servers to confirm downtime before an alert is triggered
     */
    public readonly confirmation!: pulumi.Output<number | undefined>;
    /**
     * List of contact group IDs
     */
    public readonly contactGroups!: pulumi.Output<string[] | undefined>;
    /**
     * DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    public readonly dnsCheck!: pulumi.Output<outputs.UptimeCheckDnsCheck | undefined>;
    /**
     * HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    public readonly httpCheck!: pulumi.Output<outputs.UptimeCheckHttpCheck | undefined>;
    /**
     * ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    public readonly icmpCheck!: pulumi.Output<outputs.UptimeCheckIcmpCheck | undefined>;
    /**
     * List of assigned monitoring locations on which to run checks
     */
    public /*out*/ readonly locations!: pulumi.Output<outputs.UptimeCheckLocation[]>;
    /**
     * Monitored resource configuration block. The describes server under test
     */
    public readonly monitoredResource!: pulumi.Output<outputs.UptimeCheckMonitoredResource>;
    /**
     * Name of the check
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the check should be run
     */
    public readonly paused!: pulumi.Output<boolean | undefined>;
    /**
     * List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
     * /v1/uptime-locations` endpoint
     */
    public readonly regions!: pulumi.Output<string[] | undefined>;
    /**
     * List of tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    public readonly tcpCheck!: pulumi.Output<outputs.UptimeCheckTcpCheck | undefined>;
    /**
     * The number of minutes to wait before sending an alert
     */
    public readonly triggerRate!: pulumi.Output<number | undefined>;

    /**
     * Create a UptimeCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UptimeCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UptimeCheckArgs | UptimeCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UptimeCheckState | undefined;
            resourceInputs["checkInterval"] = state ? state.checkInterval : undefined;
            resourceInputs["confirmation"] = state ? state.confirmation : undefined;
            resourceInputs["contactGroups"] = state ? state.contactGroups : undefined;
            resourceInputs["dnsCheck"] = state ? state.dnsCheck : undefined;
            resourceInputs["httpCheck"] = state ? state.httpCheck : undefined;
            resourceInputs["icmpCheck"] = state ? state.icmpCheck : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["monitoredResource"] = state ? state.monitoredResource : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tcpCheck"] = state ? state.tcpCheck : undefined;
            resourceInputs["triggerRate"] = state ? state.triggerRate : undefined;
        } else {
            const args = argsOrState as UptimeCheckArgs | undefined;
            if ((!args || args.checkInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkInterval'");
            }
            if ((!args || args.monitoredResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitoredResource'");
            }
            resourceInputs["checkInterval"] = args ? args.checkInterval : undefined;
            resourceInputs["confirmation"] = args ? args.confirmation : undefined;
            resourceInputs["contactGroups"] = args ? args.contactGroups : undefined;
            resourceInputs["dnsCheck"] = args ? args.dnsCheck : undefined;
            resourceInputs["httpCheck"] = args ? args.httpCheck : undefined;
            resourceInputs["icmpCheck"] = args ? args.icmpCheck : undefined;
            resourceInputs["monitoredResource"] = args ? args.monitoredResource : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tcpCheck"] = args ? args.tcpCheck : undefined;
            resourceInputs["triggerRate"] = args ? args.triggerRate : undefined;
            resourceInputs["locations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UptimeCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UptimeCheck resources.
 */
export interface UptimeCheckState {
    /**
     * Number of seconds between checks
     */
    checkInterval?: pulumi.Input<number>;
    /**
     * Number of confirmation servers to confirm downtime before an alert is triggered
     */
    confirmation?: pulumi.Input<number>;
    /**
     * List of contact group IDs
     */
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    dnsCheck?: pulumi.Input<inputs.UptimeCheckDnsCheck>;
    /**
     * HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    httpCheck?: pulumi.Input<inputs.UptimeCheckHttpCheck>;
    /**
     * ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    icmpCheck?: pulumi.Input<inputs.UptimeCheckIcmpCheck>;
    /**
     * List of assigned monitoring locations on which to run checks
     */
    locations?: pulumi.Input<pulumi.Input<inputs.UptimeCheckLocation>[]>;
    /**
     * Monitored resource configuration block. The describes server under test
     */
    monitoredResource?: pulumi.Input<inputs.UptimeCheckMonitoredResource>;
    /**
     * Name of the check
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the check should be run
     */
    paused?: pulumi.Input<boolean>;
    /**
     * List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
     * /v1/uptime-locations` endpoint
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    tcpCheck?: pulumi.Input<inputs.UptimeCheckTcpCheck>;
    /**
     * The number of minutes to wait before sending an alert
     */
    triggerRate?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a UptimeCheck resource.
 */
export interface UptimeCheckArgs {
    /**
     * Number of seconds between checks
     */
    checkInterval: pulumi.Input<number>;
    /**
     * Number of confirmation servers to confirm downtime before an alert is triggered
     */
    confirmation?: pulumi.Input<number>;
    /**
     * List of contact group IDs
     */
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    dnsCheck?: pulumi.Input<inputs.UptimeCheckDnsCheck>;
    /**
     * HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    httpCheck?: pulumi.Input<inputs.UptimeCheckHttpCheck>;
    /**
     * ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    icmpCheck?: pulumi.Input<inputs.UptimeCheckIcmpCheck>;
    /**
     * Monitored resource configuration block. The describes server under test
     */
    monitoredResource: pulumi.Input<inputs.UptimeCheckMonitoredResource>;
    /**
     * Name of the check
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the check should be run
     */
    paused?: pulumi.Input<boolean>;
    /**
     * List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
     * /v1/uptime-locations` endpoint
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
     */
    tcpCheck?: pulumi.Input<inputs.UptimeCheckTcpCheck>;
    /**
     * The number of minutes to wait before sending an alert
     */
    triggerRate?: pulumi.Input<number>;
}
