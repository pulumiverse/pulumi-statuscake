// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package statuscake

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type StatuscakePagespeedCheck struct {
	pulumi.CustomResourceState

	// Alert configuration block. Omitting this block disabled all alerts
	AlertConfig StatuscakePagespeedCheckAlertConfigOutput `pulumi:"alertConfig"`
	// Number of seconds between checks
	CheckInterval pulumi.IntOutput `pulumi:"checkInterval"`
	// List of contact group IDs
	ContactGroups pulumi.StringArrayOutput `pulumi:"contactGroups"`
	// Assigned monitoring location on which checks will be run
	Location pulumi.StringOutput `pulumi:"location"`
	// Monitored resource configuration block. The describes server under test
	MonitoredResource StatuscakePagespeedCheckMonitoredResourceOutput `pulumi:"monitoredResource"`
	// Name of the check
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the check should be run
	Paused pulumi.BoolPtrOutput `pulumi:"paused"`
	// Region on which to run checks
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewStatuscakePagespeedCheck registers a new resource with the given unique name, arguments, and options.
func NewStatuscakePagespeedCheck(ctx *pulumi.Context,
	name string, args *StatuscakePagespeedCheckArgs, opts ...pulumi.ResourceOption) (*StatuscakePagespeedCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertConfig == nil {
		return nil, errors.New("invalid value for required argument 'AlertConfig'")
	}
	if args.CheckInterval == nil {
		return nil, errors.New("invalid value for required argument 'CheckInterval'")
	}
	if args.MonitoredResource == nil {
		return nil, errors.New("invalid value for required argument 'MonitoredResource'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StatuscakePagespeedCheck
	err := ctx.RegisterResource("statuscake:index/statuscakePagespeedCheck:StatuscakePagespeedCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatuscakePagespeedCheck gets an existing StatuscakePagespeedCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatuscakePagespeedCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatuscakePagespeedCheckState, opts ...pulumi.ResourceOption) (*StatuscakePagespeedCheck, error) {
	var resource StatuscakePagespeedCheck
	err := ctx.ReadResource("statuscake:index/statuscakePagespeedCheck:StatuscakePagespeedCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StatuscakePagespeedCheck resources.
type statuscakePagespeedCheckState struct {
	// Alert configuration block. Omitting this block disabled all alerts
	AlertConfig *StatuscakePagespeedCheckAlertConfig `pulumi:"alertConfig"`
	// Number of seconds between checks
	CheckInterval *int `pulumi:"checkInterval"`
	// List of contact group IDs
	ContactGroups []string `pulumi:"contactGroups"`
	// Assigned monitoring location on which checks will be run
	Location *string `pulumi:"location"`
	// Monitored resource configuration block. The describes server under test
	MonitoredResource *StatuscakePagespeedCheckMonitoredResource `pulumi:"monitoredResource"`
	// Name of the check
	Name *string `pulumi:"name"`
	// Whether the check should be run
	Paused *bool `pulumi:"paused"`
	// Region on which to run checks
	Region *string `pulumi:"region"`
}

type StatuscakePagespeedCheckState struct {
	// Alert configuration block. Omitting this block disabled all alerts
	AlertConfig StatuscakePagespeedCheckAlertConfigPtrInput
	// Number of seconds between checks
	CheckInterval pulumi.IntPtrInput
	// List of contact group IDs
	ContactGroups pulumi.StringArrayInput
	// Assigned monitoring location on which checks will be run
	Location pulumi.StringPtrInput
	// Monitored resource configuration block. The describes server under test
	MonitoredResource StatuscakePagespeedCheckMonitoredResourcePtrInput
	// Name of the check
	Name pulumi.StringPtrInput
	// Whether the check should be run
	Paused pulumi.BoolPtrInput
	// Region on which to run checks
	Region pulumi.StringPtrInput
}

func (StatuscakePagespeedCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*statuscakePagespeedCheckState)(nil)).Elem()
}

type statuscakePagespeedCheckArgs struct {
	// Alert configuration block. Omitting this block disabled all alerts
	AlertConfig StatuscakePagespeedCheckAlertConfig `pulumi:"alertConfig"`
	// Number of seconds between checks
	CheckInterval int `pulumi:"checkInterval"`
	// List of contact group IDs
	ContactGroups []string `pulumi:"contactGroups"`
	// Monitored resource configuration block. The describes server under test
	MonitoredResource StatuscakePagespeedCheckMonitoredResource `pulumi:"monitoredResource"`
	// Name of the check
	Name *string `pulumi:"name"`
	// Whether the check should be run
	Paused *bool `pulumi:"paused"`
	// Region on which to run checks
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a StatuscakePagespeedCheck resource.
type StatuscakePagespeedCheckArgs struct {
	// Alert configuration block. Omitting this block disabled all alerts
	AlertConfig StatuscakePagespeedCheckAlertConfigInput
	// Number of seconds between checks
	CheckInterval pulumi.IntInput
	// List of contact group IDs
	ContactGroups pulumi.StringArrayInput
	// Monitored resource configuration block. The describes server under test
	MonitoredResource StatuscakePagespeedCheckMonitoredResourceInput
	// Name of the check
	Name pulumi.StringPtrInput
	// Whether the check should be run
	Paused pulumi.BoolPtrInput
	// Region on which to run checks
	Region pulumi.StringInput
}

func (StatuscakePagespeedCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statuscakePagespeedCheckArgs)(nil)).Elem()
}

type StatuscakePagespeedCheckInput interface {
	pulumi.Input

	ToStatuscakePagespeedCheckOutput() StatuscakePagespeedCheckOutput
	ToStatuscakePagespeedCheckOutputWithContext(ctx context.Context) StatuscakePagespeedCheckOutput
}

func (*StatuscakePagespeedCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**StatuscakePagespeedCheck)(nil)).Elem()
}

func (i *StatuscakePagespeedCheck) ToStatuscakePagespeedCheckOutput() StatuscakePagespeedCheckOutput {
	return i.ToStatuscakePagespeedCheckOutputWithContext(context.Background())
}

func (i *StatuscakePagespeedCheck) ToStatuscakePagespeedCheckOutputWithContext(ctx context.Context) StatuscakePagespeedCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatuscakePagespeedCheckOutput)
}

// StatuscakePagespeedCheckArrayInput is an input type that accepts StatuscakePagespeedCheckArray and StatuscakePagespeedCheckArrayOutput values.
// You can construct a concrete instance of `StatuscakePagespeedCheckArrayInput` via:
//
//	StatuscakePagespeedCheckArray{ StatuscakePagespeedCheckArgs{...} }
type StatuscakePagespeedCheckArrayInput interface {
	pulumi.Input

	ToStatuscakePagespeedCheckArrayOutput() StatuscakePagespeedCheckArrayOutput
	ToStatuscakePagespeedCheckArrayOutputWithContext(context.Context) StatuscakePagespeedCheckArrayOutput
}

type StatuscakePagespeedCheckArray []StatuscakePagespeedCheckInput

func (StatuscakePagespeedCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatuscakePagespeedCheck)(nil)).Elem()
}

func (i StatuscakePagespeedCheckArray) ToStatuscakePagespeedCheckArrayOutput() StatuscakePagespeedCheckArrayOutput {
	return i.ToStatuscakePagespeedCheckArrayOutputWithContext(context.Background())
}

func (i StatuscakePagespeedCheckArray) ToStatuscakePagespeedCheckArrayOutputWithContext(ctx context.Context) StatuscakePagespeedCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatuscakePagespeedCheckArrayOutput)
}

// StatuscakePagespeedCheckMapInput is an input type that accepts StatuscakePagespeedCheckMap and StatuscakePagespeedCheckMapOutput values.
// You can construct a concrete instance of `StatuscakePagespeedCheckMapInput` via:
//
//	StatuscakePagespeedCheckMap{ "key": StatuscakePagespeedCheckArgs{...} }
type StatuscakePagespeedCheckMapInput interface {
	pulumi.Input

	ToStatuscakePagespeedCheckMapOutput() StatuscakePagespeedCheckMapOutput
	ToStatuscakePagespeedCheckMapOutputWithContext(context.Context) StatuscakePagespeedCheckMapOutput
}

type StatuscakePagespeedCheckMap map[string]StatuscakePagespeedCheckInput

func (StatuscakePagespeedCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatuscakePagespeedCheck)(nil)).Elem()
}

func (i StatuscakePagespeedCheckMap) ToStatuscakePagespeedCheckMapOutput() StatuscakePagespeedCheckMapOutput {
	return i.ToStatuscakePagespeedCheckMapOutputWithContext(context.Background())
}

func (i StatuscakePagespeedCheckMap) ToStatuscakePagespeedCheckMapOutputWithContext(ctx context.Context) StatuscakePagespeedCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatuscakePagespeedCheckMapOutput)
}

type StatuscakePagespeedCheckOutput struct{ *pulumi.OutputState }

func (StatuscakePagespeedCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatuscakePagespeedCheck)(nil)).Elem()
}

func (o StatuscakePagespeedCheckOutput) ToStatuscakePagespeedCheckOutput() StatuscakePagespeedCheckOutput {
	return o
}

func (o StatuscakePagespeedCheckOutput) ToStatuscakePagespeedCheckOutputWithContext(ctx context.Context) StatuscakePagespeedCheckOutput {
	return o
}

// Alert configuration block. Omitting this block disabled all alerts
func (o StatuscakePagespeedCheckOutput) AlertConfig() StatuscakePagespeedCheckAlertConfigOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) StatuscakePagespeedCheckAlertConfigOutput { return v.AlertConfig }).(StatuscakePagespeedCheckAlertConfigOutput)
}

// Number of seconds between checks
func (o StatuscakePagespeedCheckOutput) CheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.IntOutput { return v.CheckInterval }).(pulumi.IntOutput)
}

// List of contact group IDs
func (o StatuscakePagespeedCheckOutput) ContactGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.StringArrayOutput { return v.ContactGroups }).(pulumi.StringArrayOutput)
}

// Assigned monitoring location on which checks will be run
func (o StatuscakePagespeedCheckOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Monitored resource configuration block. The describes server under test
func (o StatuscakePagespeedCheckOutput) MonitoredResource() StatuscakePagespeedCheckMonitoredResourceOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) StatuscakePagespeedCheckMonitoredResourceOutput {
		return v.MonitoredResource
	}).(StatuscakePagespeedCheckMonitoredResourceOutput)
}

// Name of the check
func (o StatuscakePagespeedCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the check should be run
func (o StatuscakePagespeedCheckOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.BoolPtrOutput { return v.Paused }).(pulumi.BoolPtrOutput)
}

// Region on which to run checks
func (o StatuscakePagespeedCheckOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *StatuscakePagespeedCheck) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type StatuscakePagespeedCheckArrayOutput struct{ *pulumi.OutputState }

func (StatuscakePagespeedCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatuscakePagespeedCheck)(nil)).Elem()
}

func (o StatuscakePagespeedCheckArrayOutput) ToStatuscakePagespeedCheckArrayOutput() StatuscakePagespeedCheckArrayOutput {
	return o
}

func (o StatuscakePagespeedCheckArrayOutput) ToStatuscakePagespeedCheckArrayOutputWithContext(ctx context.Context) StatuscakePagespeedCheckArrayOutput {
	return o
}

func (o StatuscakePagespeedCheckArrayOutput) Index(i pulumi.IntInput) StatuscakePagespeedCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StatuscakePagespeedCheck {
		return vs[0].([]*StatuscakePagespeedCheck)[vs[1].(int)]
	}).(StatuscakePagespeedCheckOutput)
}

type StatuscakePagespeedCheckMapOutput struct{ *pulumi.OutputState }

func (StatuscakePagespeedCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatuscakePagespeedCheck)(nil)).Elem()
}

func (o StatuscakePagespeedCheckMapOutput) ToStatuscakePagespeedCheckMapOutput() StatuscakePagespeedCheckMapOutput {
	return o
}

func (o StatuscakePagespeedCheckMapOutput) ToStatuscakePagespeedCheckMapOutputWithContext(ctx context.Context) StatuscakePagespeedCheckMapOutput {
	return o
}

func (o StatuscakePagespeedCheckMapOutput) MapIndex(k pulumi.StringInput) StatuscakePagespeedCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StatuscakePagespeedCheck {
		return vs[0].(map[string]*StatuscakePagespeedCheck)[vs[1].(string)]
	}).(StatuscakePagespeedCheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StatuscakePagespeedCheckInput)(nil)).Elem(), &StatuscakePagespeedCheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatuscakePagespeedCheckArrayInput)(nil)).Elem(), StatuscakePagespeedCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatuscakePagespeedCheckMapInput)(nil)).Elem(), StatuscakePagespeedCheckMap{})
	pulumi.RegisterOutputType(StatuscakePagespeedCheckOutput{})
	pulumi.RegisterOutputType(StatuscakePagespeedCheckArrayOutput{})
	pulumi.RegisterOutputType(StatuscakePagespeedCheckMapOutput{})
}
