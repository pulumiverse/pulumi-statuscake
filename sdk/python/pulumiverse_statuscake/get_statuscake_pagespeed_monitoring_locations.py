# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetStatuscakePagespeedMonitoringLocationsResult',
    'AwaitableGetStatuscakePagespeedMonitoringLocationsResult',
    'get_statuscake_pagespeed_monitoring_locations',
    'get_statuscake_pagespeed_monitoring_locations_output',
]

@pulumi.output_type
class GetStatuscakePagespeedMonitoringLocationsResult:
    """
    A collection of values returned by getStatuscakePagespeedMonitoringLocations.
    """
    def __init__(__self__, id=None, locations=None, region_code=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if region_code and not isinstance(region_code, str):
            raise TypeError("Expected argument 'region_code' to be a str")
        pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetStatuscakePagespeedMonitoringLocationsLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[str]:
        return pulumi.get(self, "region_code")


class AwaitableGetStatuscakePagespeedMonitoringLocationsResult(GetStatuscakePagespeedMonitoringLocationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStatuscakePagespeedMonitoringLocationsResult(
            id=self.id,
            locations=self.locations,
            region_code=self.region_code)


def get_statuscake_pagespeed_monitoring_locations(region_code: Optional[str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStatuscakePagespeedMonitoringLocationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['regionCode'] = region_code
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('statuscake:index/getStatuscakePagespeedMonitoringLocations:getStatuscakePagespeedMonitoringLocations', __args__, opts=opts, typ=GetStatuscakePagespeedMonitoringLocationsResult).value

    return AwaitableGetStatuscakePagespeedMonitoringLocationsResult(
        id=__ret__.id,
        locations=__ret__.locations,
        region_code=__ret__.region_code)


@_utilities.lift_output_func(get_statuscake_pagespeed_monitoring_locations)
def get_statuscake_pagespeed_monitoring_locations_output(region_code: Optional[pulumi.Input[Optional[str]]] = None,
                                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStatuscakePagespeedMonitoringLocationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
