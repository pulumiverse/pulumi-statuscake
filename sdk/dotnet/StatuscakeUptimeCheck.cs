// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Statuscake
{
    [StatuscakeResourceType("statuscake:index/statuscakeUptimeCheck:StatuscakeUptimeCheck")]
    public partial class StatuscakeUptimeCheck : Pulumi.CustomResource
    {
        /// <summary>
        /// Number of seconds between checks
        /// </summary>
        [Output("checkInterval")]
        public Output<int> CheckInterval { get; private set; } = null!;

        /// <summary>
        /// Number of confirmation servers to confirm downtime before an alert is triggered
        /// </summary>
        [Output("confirmation")]
        public Output<int?> Confirmation { get; private set; } = null!;

        /// <summary>
        /// List of contact group IDs
        /// </summary>
        [Output("contactGroups")]
        public Output<ImmutableArray<string>> ContactGroups { get; private set; } = null!;

        /// <summary>
        /// DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Output("dnsCheck")]
        public Output<Outputs.StatuscakeUptimeCheckDnsCheck?> DnsCheck { get; private set; } = null!;

        /// <summary>
        /// HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Output("httpCheck")]
        public Output<Outputs.StatuscakeUptimeCheckHttpCheck?> HttpCheck { get; private set; } = null!;

        /// <summary>
        /// ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Output("icmpCheck")]
        public Output<Outputs.StatuscakeUptimeCheckIcmpCheck?> IcmpCheck { get; private set; } = null!;

        /// <summary>
        /// List of assigned monitoring locations on which to run checks
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<Outputs.StatuscakeUptimeCheckLocation>> Locations { get; private set; } = null!;

        /// <summary>
        /// Monitored resource configuration block. The describes server under test
        /// </summary>
        [Output("monitoredResource")]
        public Output<Outputs.StatuscakeUptimeCheckMonitoredResource> MonitoredResource { get; private set; } = null!;

        /// <summary>
        /// Name of the check
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the check should be run
        /// </summary>
        [Output("paused")]
        public Output<bool?> Paused { get; private set; } = null!;

        /// <summary>
        /// List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
        /// /v1/uptime-locations` endpoint
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// List of tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Output("tcpCheck")]
        public Output<Outputs.StatuscakeUptimeCheckTcpCheck?> TcpCheck { get; private set; } = null!;

        /// <summary>
        /// The number of minutes to wait before sending an alert
        /// </summary>
        [Output("triggerRate")]
        public Output<int?> TriggerRate { get; private set; } = null!;


        /// <summary>
        /// Create a StatuscakeUptimeCheck resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StatuscakeUptimeCheck(string name, StatuscakeUptimeCheckArgs args, CustomResourceOptions? options = null)
            : base("statuscake:index/statuscakeUptimeCheck:StatuscakeUptimeCheck", name, args ?? new StatuscakeUptimeCheckArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StatuscakeUptimeCheck(string name, Input<string> id, StatuscakeUptimeCheckState? state = null, CustomResourceOptions? options = null)
            : base("statuscake:index/statuscakeUptimeCheck:StatuscakeUptimeCheck", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StatuscakeUptimeCheck resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StatuscakeUptimeCheck Get(string name, Input<string> id, StatuscakeUptimeCheckState? state = null, CustomResourceOptions? options = null)
        {
            return new StatuscakeUptimeCheck(name, id, state, options);
        }
    }

    public sealed class StatuscakeUptimeCheckArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of seconds between checks
        /// </summary>
        [Input("checkInterval", required: true)]
        public Input<int> CheckInterval { get; set; } = null!;

        /// <summary>
        /// Number of confirmation servers to confirm downtime before an alert is triggered
        /// </summary>
        [Input("confirmation")]
        public Input<int>? Confirmation { get; set; }

        [Input("contactGroups")]
        private InputList<string>? _contactGroups;

        /// <summary>
        /// List of contact group IDs
        /// </summary>
        public InputList<string> ContactGroups
        {
            get => _contactGroups ?? (_contactGroups = new InputList<string>());
            set => _contactGroups = value;
        }

        /// <summary>
        /// DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("dnsCheck")]
        public Input<Inputs.StatuscakeUptimeCheckDnsCheckArgs>? DnsCheck { get; set; }

        /// <summary>
        /// HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("httpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckHttpCheckArgs>? HttpCheck { get; set; }

        /// <summary>
        /// ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("icmpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckIcmpCheckArgs>? IcmpCheck { get; set; }

        /// <summary>
        /// Monitored resource configuration block. The describes server under test
        /// </summary>
        [Input("monitoredResource", required: true)]
        public Input<Inputs.StatuscakeUptimeCheckMonitoredResourceArgs> MonitoredResource { get; set; } = null!;

        /// <summary>
        /// Name of the check
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the check should be run
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
        /// /v1/uptime-locations` endpoint
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("tcpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckTcpCheckArgs>? TcpCheck { get; set; }

        /// <summary>
        /// The number of minutes to wait before sending an alert
        /// </summary>
        [Input("triggerRate")]
        public Input<int>? TriggerRate { get; set; }

        public StatuscakeUptimeCheckArgs()
        {
        }
    }

    public sealed class StatuscakeUptimeCheckState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of seconds between checks
        /// </summary>
        [Input("checkInterval")]
        public Input<int>? CheckInterval { get; set; }

        /// <summary>
        /// Number of confirmation servers to confirm downtime before an alert is triggered
        /// </summary>
        [Input("confirmation")]
        public Input<int>? Confirmation { get; set; }

        [Input("contactGroups")]
        private InputList<string>? _contactGroups;

        /// <summary>
        /// List of contact group IDs
        /// </summary>
        public InputList<string> ContactGroups
        {
            get => _contactGroups ?? (_contactGroups = new InputList<string>());
            set => _contactGroups = value;
        }

        /// <summary>
        /// DNS check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("dnsCheck")]
        public Input<Inputs.StatuscakeUptimeCheckDnsCheckGetArgs>? DnsCheck { get; set; }

        /// <summary>
        /// HTTP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("httpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckHttpCheckGetArgs>? HttpCheck { get; set; }

        /// <summary>
        /// ICMP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("icmpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckIcmpCheckGetArgs>? IcmpCheck { get; set; }

        [Input("locations")]
        private InputList<Inputs.StatuscakeUptimeCheckLocationGetArgs>? _locations;

        /// <summary>
        /// List of assigned monitoring locations on which to run checks
        /// </summary>
        public InputList<Inputs.StatuscakeUptimeCheckLocationGetArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.StatuscakeUptimeCheckLocationGetArgs>());
            set => _locations = value;
        }

        /// <summary>
        /// Monitored resource configuration block. The describes server under test
        /// </summary>
        [Input("monitoredResource")]
        public Input<Inputs.StatuscakeUptimeCheckMonitoredResourceGetArgs>? MonitoredResource { get; set; }

        /// <summary>
        /// Name of the check
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the check should be run
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET
        /// /v1/uptime-locations` endpoint
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// TCP check configuration block. Only one of `dns_check`, `http_check`, `icmp_check`, and `tcp_check` may be specified
        /// </summary>
        [Input("tcpCheck")]
        public Input<Inputs.StatuscakeUptimeCheckTcpCheckGetArgs>? TcpCheck { get; set; }

        /// <summary>
        /// The number of minutes to wait before sending an alert
        /// </summary>
        [Input("triggerRate")]
        public Input<int>? TriggerRate { get; set; }

        public StatuscakeUptimeCheckState()
        {
        }
    }
}
