// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Statuscake
{
    /// <summary>
    /// The provider type for the statuscake package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [StatuscakeResourceType("pulumi:providers:statuscake")]
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// The API token for operations. This can also be provided as an environment variable `STATUSCAKE_API_TOKEN`
        /// </summary>
        [Output("apiToken")]
        public Output<string?> ApiToken { get; private set; } = null!;

        /// <summary>
        /// Custom endpoint to which request will be made. This can also be provided as an environment variable
        /// `STATUCAKE_CUSTOM_ENDPOINT`
        /// </summary>
        [Output("statuscakeCustomEndpoint")]
        public Output<string?> StatuscakeCustomEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("statuscake", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "apiToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        [Input("apiToken")]
        private Input<string>? _apiToken;

        /// <summary>
        /// The API token for operations. This can also be provided as an environment variable `STATUSCAKE_API_TOKEN`
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Maximum backoff period in seconds after failed API calls. This can also be provided as an environment variable
        /// `STATUSCAKE_MAX_BACKOFF`
        /// </summary>
        [Input("maxBackoff", json: true)]
        public Input<int>? MaxBackoff { get; set; }

        /// <summary>
        /// Minimum backoff period in seconds after failed API calls. This can also be provided as an environment variable
        /// `STATUSCAKE_MIN_BACKOFF`
        /// </summary>
        [Input("minBackoff", json: true)]
        public Input<int>? MinBackoff { get; set; }

        /// <summary>
        /// Maximum number of retries to perform when an API request fails. This can also be provided as an environment variable
        /// `STATUSCAKE_RETRIES`
        /// </summary>
        [Input("retries", json: true)]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// RPS limit to apply when making calls to the API. This can also be provided as an environment variable `STATUSCAKE_RPS`
        /// </summary>
        [Input("rps", json: true)]
        public Input<int>? Rps { get; set; }

        /// <summary>
        /// Custom endpoint to which request will be made. This can also be provided as an environment variable
        /// `STATUCAKE_CUSTOM_ENDPOINT`
        /// </summary>
        [Input("statuscakeCustomEndpoint")]
        public Input<string>? StatuscakeCustomEndpoint { get; set; }

        public ProviderArgs()
        {
            ApiToken = Utilities.GetEnv("STATUSCAKE_API_TOKEN");
        }
    }
}
